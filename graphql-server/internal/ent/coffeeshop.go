// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/adamyeats/coffeeshops/graphql-server/internal/ent/coffeeshop"
)

// Coffeeshop is the model entity for the Coffeeshop schema.
type Coffeeshop struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Coffeeshop) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coffeeshop.FieldLatitude, coffeeshop.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case coffeeshop.FieldID:
			values[i] = new(sql.NullInt64)
		case coffeeshop.FieldName, coffeeshop.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Coffeeshop", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Coffeeshop fields.
func (c *Coffeeshop) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coffeeshop.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case coffeeshop.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case coffeeshop.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				c.Address = value.String
			}
		case coffeeshop.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				c.Latitude = value.Float64
			}
		case coffeeshop.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				c.Longitude = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Coffeeshop.
// Note that you need to call Coffeeshop.Unwrap() before calling this method if this Coffeeshop
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Coffeeshop) Update() *CoffeeshopUpdateOne {
	return NewCoffeeshopClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Coffeeshop entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Coffeeshop) Unwrap() *Coffeeshop {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Coffeeshop is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Coffeeshop) String() string {
	var builder strings.Builder
	builder.WriteString("Coffeeshop(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(c.Address)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", c.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", c.Longitude))
	builder.WriteByte(')')
	return builder.String()
}

// Coffeeshops is a parsable slice of Coffeeshop.
type Coffeeshops []*Coffeeshop
