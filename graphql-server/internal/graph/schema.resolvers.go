package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/adamyeats/coffeeshops/graphql-server/internal/ent"
)

// Coffeeshops is the resolver for the coffeeshops field.
func (r *queryResolver) Coffeeshops(ctx context.Context) ([]*ent.Coffeeshop, error) {
	resultChan := make(chan []*ent.Coffeeshop)
	errChan := make(chan error)

	// Start a Goroutine to execute the query asynchronously
	go func() {
		coffeeshops, err := r.DB.Client.Coffeeshop.Query().All(ctx)

		if err != nil {
			errChan <- err
			return
		}

		resultChan <- coffeeshops
	}()

	// Wait for either the query result or an error
	select {
	case coffeeshops := <-resultChan:
		return coffeeshops, nil
	case err := <-errChan:
		return nil, err
	}
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
